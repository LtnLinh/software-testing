name: API Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SPRINT: sprint5-with-bugs
  DISABLE_LOGGING: true

jobs:
  api-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Newman
        run: |
          npm install -g newman newman-reporter-htmlextra

      - name: Start application with Docker Compose
        run: |
          docker compose up -d

      - name: Create Laravel .env file
        run: |
          cd sprint5-with-bugs/API
          cp .env_template .env
          # Update database configuration for Docker environment
          sed -i 's/DB_HOST=127.0.0.1/DB_HOST=mariadb/g' .env
          sed -i 's/DB_DATABASE=${SECRET_DB}_with_bugs/DB_DATABASE=toolshop/g' .env
          sed -i 's/DB_USERNAME=${SECRET_DB_USER}/DB_USERNAME=user/g' .env
          sed -i 's/DB_PASSWORD=${SECRET_DB_PASS}/DB_PASSWORD=root/g' .env
          sed -i 's/APP_ENV=production/APP_ENV=local/g' .env
          sed -i 's/APP_DEBUG=false/APP_DEBUG=true/g' .env

      - name: Run migrations and seed
        run: |
          docker compose exec laravel-api php artisan migrate:fresh --seed

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to be ready..."
          timeout=120
          counter=0
          while [ $counter -lt $timeout ]; do
            if curl -f http://localhost:8091/api/health > /dev/null 2>&1 || curl -f http://localhost:8091/health > /dev/null 2>&1 || curl -f http://localhost:8091/ > /dev/null 2>&1; then
              echo "API is ready!"
              break
            fi
            echo "API not ready yet, waiting... ($counter/$timeout)"
            sleep 5
            counter=$((counter + 5))
          done
          if [ $counter -eq $timeout ]; then
            echo "Timeout waiting for API to be ready"
            exit 1
          fi

      - name: Prepare report directory
        run: |
          mkdir -p test-results/newman

      - name: Run Register API Tests
        working-directory: sprint5-with-bugs/tests/API
        run: |
          newman run collection.json --folder "RegisterAPI" -e env.json -d data/register_test_data.csv --reporters cli,htmlextra --reporter-htmlextra-export ../../../test-results/newman/register-api-tests.html

      - name: Run Update User API Tests
        working-directory: sprint5-with-bugs/tests/API
        run: |
          newman run collection.json --folder "UpdateUserAPI" -e env.json -d data/update_user_test_data.csv --reporters cli,htmlextra --reporter-htmlextra-export ../../../test-results/newman/update-user-api-tests.html

      - name: Run Login API Tests
        working-directory: sprint5-with-bugs/tests/API
        run: |
          newman run collection.json --folder "LoginAPI" -e env.json -d data/login_test_data.csv --reporters cli,htmlextra --reporter-htmlextra-export ../../../test-results/newman/login-api-tests.html

      - name: Upload Newman HTML Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: newman-api-reports
          path: test-results/newman/
          if-no-files-found: warn

      - name: Stop Docker containers
        if: always()
        run: |
          docker compose down
