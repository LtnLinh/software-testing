name: API Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SPRINT: sprint5-with-bugs
  DISABLE_LOGGING: true

jobs:
  api-test:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout ⚙️
        uses: actions/checkout@v4

      - name: Start containers 🐳
        run: |
          export SPRINT=sprint5-with-bugs
          export DISABLE_LOGGING=true
          docker compose -f docker-compose.prod.yml up --pull missing -d

      - name: Wait for containers to be ready
        run: |
          echo "Waiting for containers to be ready..."
          timeout=120
          counter=0
          while [ $counter -lt $timeout ]; do
            if docker compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "Containers are running!"
              break
            fi
            echo "Waiting for containers... ($counter/$timeout)"
            sleep 5
            counter=$((counter + 5))
          done

      - name: Disable FFI extension
        run: |
          # Disable FFI extension to prevent PHP startup errors
          docker compose -f docker-compose.prod.yml exec --user root laravel-api sh -c "
            echo '; FFI extension disabled for CI/CD' > /usr/local/etc/php/conf.d/ffi.ini
            echo '; extension=ffi' >> /usr/local/etc/php/conf.d/ffi.ini
            echo 'ffi.enable=0' >> /usr/local/etc/php/conf.d/ffi.ini
            echo 'FFI extension disabled successfully'
          "

      - name: Wait for database to be ready
        run: |
          echo "Waiting for database to be ready..."
          timeout=60
          counter=0
          while [ $counter -lt $timeout ]; do
            if docker compose -f docker-compose.prod.yml exec mariadb mysqladmin ping -h localhost -u root -proot --silent; then
              echo "Database is ready!"
              break
            fi
            echo "Database not ready yet... ($counter/$timeout)"
            sleep 5
            counter=$((counter + 5))
          done
          if [ $counter -eq $timeout ]; then
            echo "Database connection failed"
            docker compose -f docker-compose.prod.yml logs mariadb
            exit 1
          fi

      - name: Debug container status and networking
        run: |
          echo "=== Container Status ==="
          docker compose -f docker-compose.prod.yml ps
          echo ""
          echo "=== Container Logs ==="
          docker compose -f docker-compose.prod.yml logs web
          echo ""
          echo "=== Network Interfaces ==="
          ip addr show
          echo ""
          echo "=== Port Listening ==="
          netstat -tlnp || ss -tlnp
          echo ""
          echo "=== Docker Networks ==="
          docker network ls
          echo ""
          echo "=== Testing localhost:8091 ==="
          curl -v http://localhost:8091/ || echo "curl failed"
          echo ""
          echo "=== Testing 127.0.0.1:8091 ==="
          curl -v http://127.0.0.1:8091/ || echo "curl failed"

      - name: Create & Seed database 🌱
        run: |
          docker compose -f docker-compose.prod.yml exec -T laravel-api php artisan migrate:fresh --seed --force

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Newman
        run: |
          npm install -g newman newman-reporter-htmlextra

      - name: Prepare report directory
        run: |
          mkdir -p test-results/newman

      - name: Run Login API Tests
        working-directory: sprint5-with-bugs/tests/API
        run: |
          newman run collection.json --folder "LoginAPI" -e env.json -d data/login_test_data.csv --reporters cli,htmlextra --reporter-htmlextra-export ../../../test-results/newman/login-api-tests.html

      - name: Run Register API Tests
        working-directory: sprint5-with-bugs/tests/API
        run: |
          newman run collection.json --folder "RegisterAPI" -e env.json -d data/register_test_data.csv --reporters cli,htmlextra --reporter-htmlextra-export ../../../test-results/newman/register-api-tests.html

      - name: Run Update User API Tests
        working-directory: sprint5-with-bugs/tests/API
        run: |
          newman run collection.json --folder "UpdateUserAPI" -e env.json -d data/update_user_test_data.csv --reporters cli,htmlextra --reporter-htmlextra-export ../../../test-results/newman/update-user-api-tests.html

      - name: Upload Newman HTML Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: newman-api-reports
          path: test-results/newman/
          if-no-files-found: warn

      - name: Stop containers
        if: always()
        run: |
          docker compose -f docker-compose.prod.yml down
